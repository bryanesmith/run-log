openapi: '3.0.0'

info:
  version: '0.0.1'
  title: "run-log"

paths:

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /api/v1/events:

    #
    # Fetch events
    #
    get:
      summary: "Get all events"
      responses:
        200:
          description: "Successfully returning all events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsPayload"
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      security:
        - request_authorizer_single_header: []
      x-amazon-apigateway-integration:
        uri: ${get_events_lambda_arn}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
        authorization:

    #
    # Enables non-simple CORs.
    # See: https://docs.aws.amazon.com/apigateway/latest/developerguide/enable-cors-for-resource-using-swagger-importer-tool.html
    #
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods : "'*'"
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"

components:
  securitySchemes:
    request_authorizer_single_header:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: token
        identitySource: method.request.header.Authorization
        authorizerCredentials: ${lambda_role_arn}
        authorizerUri: ${authorizer_arn}
        authorizerResultTtlInSeconds: 300
  schemas:

    # - - - - - - - - - - - - - - - - - - - - - - - - - - -
    EventsPayload:
      type: object
      description: "Payload containing array of events"
      properties:
        events:
          type: array
          description: "The events being returned"
          items:
            $ref: "#/components/schemas/Event"
      required:
        - events

    # - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Event:
      type: object
      description: "An event."
      properties:
        "@type":
          type: string
          enum: [ Run, Run+CrossTrain, CrossTrain, ChangeShoes ]
        "@id":
          type: string
        date:
          type: string
        run: # Polymorphic
          oneOf:
            - $ref: "#/components/schemas/Intervals"
            - $ref: "#/components/schemas/SteadyStateRun"
          #
          # Not supported by AWS as of 2019/12/13
          #

          #discriminator:
          #  propertyName: "@type"
          #  mapping:
          #    Intervals: Intervals
          #    SteadyStateRun: SteadyStateRun
        favorite:
          type: boolean
        notes:
          type: string
      required:
        - "@type"
        - "@id"
        - date

    # - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Intervals:
      type: object
      description: ""
      properties:
        "@type":
          type: string
        category:
          type: string
          enum: [ intervals, hills ]
        distance:
          type: number # TODO: double
        duration:
          type: string
      required:
        - "@type"
        - category

    # - - - - - - - - - - - - - - - - - - - - - - - - - - -
    SteadyStateRun:
      type: object
      description: ""
      properties:
        "@type":
          type: string
        category:
          type: string
          enum: [casual, speed, distance ]
        count:
          type: integer
        intervalDuration:
          type: string
        intervalSpeed:
          type: number # TODO: double
        restDuration:
          type: string
      required:
        - "@type"
        - category
        - count
