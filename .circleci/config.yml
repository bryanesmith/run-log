version: 2.1

#
# For description of required environment variables, see "Setup" in
#   README.md
#

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
jobs:

  build_and_deploy_run_log_job:

    parameters:

      run_log_version:
        description: Version of run-log
        type: string
        default: "1.0.0"

      python_version:
        description: Python version
        type: string
        default: "3.8"

      yarn_version:
        description: Yarn version
        type: string
        default: "0.27.5"

      aws_region:
        description: AWS region
        type: string
        default: "us-east-1"

      tf_version:
        description: Terraform version
        type: string
        default: "0.12.18"

    docker:
      - image: circleci/python:<< parameters.python_version >>-node

    environment:
      - AWS_DEFAULT_REGION: << parameters.aws_region >>

    steps:

      #
      # NOTE: Could break these sections into separate jobs. However, this would
      #       incur around 15+ second overhead per job for spinning up environment
      #       and installing AWS CLI.
      #

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Install dependencies, prepare environment
      - run:
          name: Install AWS CLI
          command: pip3 install awscli --user
      - run:
          name: Install Terraform
          command: |
            export tf_version=<<parameters.tf_version>>
            git clone https://github.com/tfutils/tfenv ~/.tfenv

            # Export for sake of current shell
            export PATH=$HOME/.tfenv/bin:$PATH

            # Export for sake of future shells (other steps)
            echo "export PATH=$PATH" >> $BASH_ENV

            tfenv install $tf_version
            tfenv use $tf_version
      - checkout    # Must checkout before create files/directories
      - run:
          name: Creating build directory
          command: |
            if [ ! -e ".build" ]; then
              mkdir .build
            fi

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Provision staging infrastructure
      - run:
          name: Apply Terraform changes
          command: |
            ( # subshell to avoid changing working directory
              cd terraform/staging

              # Apply changes
              terraform init \
                -backend-config="bucket=${AWS_S3_BUCKET_NAME_STAGING_ASSETS}" \
                -backend-config="region=<< parameters.aws_region >>"

              terraform apply -auto-approve \
                -var="aws_region=<< parameters.aws_region >>" \
                -var="staging_bucket_name=${AWS_S3_BUCKET_NAME_STAGING_ASSETS}"
            )

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Bundle and stage lambdas
      - run:
          name: Bundle lambdas
          command: |
            ( # subshell to avoid changing working directory
              ROOT_DIR=`pwd`

              #
              # Changing directory instead of use relative paths to avoid using
              #   both -r and -j together, which breaks if add subdirectories
              #   to lambdas in future
              #
              cd backend/src/lambdas
              for Lambda in `ls`; do
                cd "${Lambda}"
                Zip="${Lambda}.zip"
                echo "Creating: ${Zip}"
                zip -r "${ROOT_DIR}/.build/${Zip}" "."
                cd ..
              done
            )
      - run:
          name: Deploying lambdas
          command: |
            ( # subshell to avoid changing working directory
              cd .build
              for LambdaZip in `ls *.zip`; do
                echo "Deploying: $LambdaZip"
                aws s3 cp "${LambdaZip}" "s3://run-log.bryanesmith.com-staging-assets/1.0.0/${LambdaZip}"
                # aws s3 cp "${LambdaZip}" "s3://${AWS_S3_BUCKET_NAME_STAGING_ASSETS}/<< parameters.run_log_version >>/${LambdaZip}"
              done
            )

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Provision web infrastructure and deploy backend
      - run:
          name: Apply Terraform changes
          command: |
            ( # subshell to avoid changing working directory
              cd terraform/infrastructure

              # Apply changes
              terraform init \
                -backend-config="bucket=${AWS_S3_BUCKET_NAME_STAGING_ASSETS}" \
                -backend-config="region=<< parameters.aws_region >>"

              terraform apply -auto-approve \
                -var="aws_region=<< parameters.aws_region >>" \
                -var="cors_allowed_origins=${CORS_ALLOWED_ORIGINS}" \
                -var="dynamodb_table=${AWS_DYNAMODB_TABLE_NAME}" \
                -var="run_log_version=<< parameters.run_log_version >>" \
                -var="s3_bucket_stage_assets=${AWS_S3_BUCKET_NAME_STAGING_ASSETS}"

              # Export variables
              export PRODUCTION_API_SERVER_BASE_URL=`terraform output api-gateway-url`
              echo "PRODUCTION_API_SERVER_BASE_URL=$PRODUCTION_API_SERVER_BASE_URL" >> $BASH_ENV
            )

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      # Build and deploy static web assets
      - run:
          name: Create frontend configuration
          command: |
            FE_CONFIG=frontend/src/config.json
            cat \<<- EOF > "${FE_CONFIG}"
            {
              "baseUrl": "${PRODUCTION_API_SERVER_BASE_URL}"
            }
            EOF
            if [ ! -e "${FE_CONFIG}" ]; then
              echo "File not found: ${FE_CONFIG}"
              exit 1
            else
              echo "Printing ${FE_CONFIG}:"
              cat "${FE_CONFIG}"
            fi
      - restore_cache:
          key: npm-cache-{{ .Branch }}-v4--{{ checksum "frontend/package.json" }}
      - run:
          name: Build frontend
          command: |
            ( # subshell to avoid changing working directory

              ### install yarn
              curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version << parameters.yarn_version >>
              yarn -v

              ### Run yarn to build frontend
              cd frontend
              yarn && yarn build
            )
      - save_cache:
          key: npm-cache-{{ .Branch }}-v4--{{ checksum "frontend/package.json" }}
          paths:
            - frontend/node_modules
      - run:
          name: View web assets
          command: ls frontend/dist
      # TODO: Set up s3 bucket, if not exists, using Terraform
      # TODO: Branch-specific s3 buckets
      - run:
          name: Sync web assets with S3
          command: aws s3 sync frontend/dist s3://${AWS_S3_BUCKET_NAME_WEB_HOST}

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
workflows:
  version: 2
  build_and_deploy_run_log_workflow:
    jobs:
      - build_and_deploy_run_log_job
